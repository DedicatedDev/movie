// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: movie/movie/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMovieRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetMovieRequest) Reset()         { *m = QueryGetMovieRequest{} }
func (m *QueryGetMovieRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMovieRequest) ProtoMessage()    {}
func (*QueryGetMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{2}
}
func (m *QueryGetMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMovieRequest.Merge(m, src)
}
func (m *QueryGetMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMovieRequest proto.InternalMessageInfo

func (m *QueryGetMovieRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetMovieResponse struct {
	Movie Movie `protobuf:"bytes,1,opt,name=Movie,proto3" json:"Movie"`
}

func (m *QueryGetMovieResponse) Reset()         { *m = QueryGetMovieResponse{} }
func (m *QueryGetMovieResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMovieResponse) ProtoMessage()    {}
func (*QueryGetMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{3}
}
func (m *QueryGetMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMovieResponse.Merge(m, src)
}
func (m *QueryGetMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMovieResponse proto.InternalMessageInfo

func (m *QueryGetMovieResponse) GetMovie() Movie {
	if m != nil {
		return m.Movie
	}
	return Movie{}
}

type QueryAllMovieRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMovieRequest) Reset()         { *m = QueryAllMovieRequest{} }
func (m *QueryAllMovieRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMovieRequest) ProtoMessage()    {}
func (*QueryAllMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{4}
}
func (m *QueryAllMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMovieRequest.Merge(m, src)
}
func (m *QueryAllMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMovieRequest proto.InternalMessageInfo

func (m *QueryAllMovieRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMovieResponse struct {
	Movie      []Movie             `protobuf:"bytes,1,rep,name=Movie,proto3" json:"Movie"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMovieResponse) Reset()         { *m = QueryAllMovieResponse{} }
func (m *QueryAllMovieResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMovieResponse) ProtoMessage()    {}
func (*QueryAllMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{5}
}
func (m *QueryAllMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMovieResponse.Merge(m, src)
}
func (m *QueryAllMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMovieResponse proto.InternalMessageInfo

func (m *QueryAllMovieResponse) GetMovie() []Movie {
	if m != nil {
		return m.Movie
	}
	return nil
}

func (m *QueryAllMovieResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReviewRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetReviewRequest) Reset()         { *m = QueryGetReviewRequest{} }
func (m *QueryGetReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReviewRequest) ProtoMessage()    {}
func (*QueryGetReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{6}
}
func (m *QueryGetReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReviewRequest.Merge(m, src)
}
func (m *QueryGetReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReviewRequest proto.InternalMessageInfo

func (m *QueryGetReviewRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetReviewResponse struct {
	Review Review `protobuf:"bytes,1,opt,name=Review,proto3" json:"Review"`
}

func (m *QueryGetReviewResponse) Reset()         { *m = QueryGetReviewResponse{} }
func (m *QueryGetReviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReviewResponse) ProtoMessage()    {}
func (*QueryGetReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{7}
}
func (m *QueryGetReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReviewResponse.Merge(m, src)
}
func (m *QueryGetReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReviewResponse proto.InternalMessageInfo

func (m *QueryGetReviewResponse) GetReview() Review {
	if m != nil {
		return m.Review
	}
	return Review{}
}

type QueryAllReviewRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewRequest) Reset()         { *m = QueryAllReviewRequest{} }
func (m *QueryAllReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewRequest) ProtoMessage()    {}
func (*QueryAllReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{8}
}
func (m *QueryAllReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewRequest.Merge(m, src)
}
func (m *QueryAllReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewRequest proto.InternalMessageInfo

func (m *QueryAllReviewRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReviewResponse struct {
	Review     []Review            `protobuf:"bytes,1,rep,name=Review,proto3" json:"Review"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewResponse) Reset()         { *m = QueryAllReviewResponse{} }
func (m *QueryAllReviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewResponse) ProtoMessage()    {}
func (*QueryAllReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{9}
}
func (m *QueryAllReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewResponse.Merge(m, src)
}
func (m *QueryAllReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewResponse proto.InternalMessageInfo

func (m *QueryAllReviewResponse) GetReview() []Review {
	if m != nil {
		return m.Review
	}
	return nil
}

func (m *QueryAllReviewResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredMovieRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *QueryGetStoredMovieRequest) Reset()         { *m = QueryGetStoredMovieRequest{} }
func (m *QueryGetStoredMovieRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredMovieRequest) ProtoMessage()    {}
func (*QueryGetStoredMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{10}
}
func (m *QueryGetStoredMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredMovieRequest.Merge(m, src)
}
func (m *QueryGetStoredMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredMovieRequest proto.InternalMessageInfo

func (m *QueryGetStoredMovieRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type QueryGetStoredMovieResponse struct {
	StoredMovie StoredMovie `protobuf:"bytes,1,opt,name=storedMovie,proto3" json:"storedMovie"`
}

func (m *QueryGetStoredMovieResponse) Reset()         { *m = QueryGetStoredMovieResponse{} }
func (m *QueryGetStoredMovieResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredMovieResponse) ProtoMessage()    {}
func (*QueryGetStoredMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{11}
}
func (m *QueryGetStoredMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredMovieResponse.Merge(m, src)
}
func (m *QueryGetStoredMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredMovieResponse proto.InternalMessageInfo

func (m *QueryGetStoredMovieResponse) GetStoredMovie() StoredMovie {
	if m != nil {
		return m.StoredMovie
	}
	return StoredMovie{}
}

type QueryAllStoredMovieRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredMovieRequest) Reset()         { *m = QueryAllStoredMovieRequest{} }
func (m *QueryAllStoredMovieRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredMovieRequest) ProtoMessage()    {}
func (*QueryAllStoredMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{12}
}
func (m *QueryAllStoredMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredMovieRequest.Merge(m, src)
}
func (m *QueryAllStoredMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredMovieRequest proto.InternalMessageInfo

func (m *QueryAllStoredMovieRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredMovieResponse struct {
	StoredMovie []StoredMovie       `protobuf:"bytes,1,rep,name=storedMovie,proto3" json:"storedMovie"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredMovieResponse) Reset()         { *m = QueryAllStoredMovieResponse{} }
func (m *QueryAllStoredMovieResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredMovieResponse) ProtoMessage()    {}
func (*QueryAllStoredMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{13}
}
func (m *QueryAllStoredMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredMovieResponse.Merge(m, src)
}
func (m *QueryAllStoredMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredMovieResponse proto.InternalMessageInfo

func (m *QueryAllStoredMovieResponse) GetStoredMovie() []StoredMovie {
	if m != nil {
		return m.StoredMovie
	}
	return nil
}

func (m *QueryAllStoredMovieResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredReviewRequest struct {
	MovieId uint64 `protobuf:"varint,1,opt,name=movieId,proto3" json:"movieId,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetStoredReviewRequest) Reset()         { *m = QueryGetStoredReviewRequest{} }
func (m *QueryGetStoredReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredReviewRequest) ProtoMessage()    {}
func (*QueryGetStoredReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{14}
}
func (m *QueryGetStoredReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredReviewRequest.Merge(m, src)
}
func (m *QueryGetStoredReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredReviewRequest proto.InternalMessageInfo

func (m *QueryGetStoredReviewRequest) GetMovieId() uint64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *QueryGetStoredReviewRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetStoredReviewResponse struct {
	StoredReview StoredReview `protobuf:"bytes,1,opt,name=storedReview,proto3" json:"storedReview"`
}

func (m *QueryGetStoredReviewResponse) Reset()         { *m = QueryGetStoredReviewResponse{} }
func (m *QueryGetStoredReviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredReviewResponse) ProtoMessage()    {}
func (*QueryGetStoredReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{15}
}
func (m *QueryGetStoredReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredReviewResponse.Merge(m, src)
}
func (m *QueryGetStoredReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredReviewResponse proto.InternalMessageInfo

func (m *QueryGetStoredReviewResponse) GetStoredReview() StoredReview {
	if m != nil {
		return m.StoredReview
	}
	return StoredReview{}
}

type QueryAllStoredReviewRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredReviewRequest) Reset()         { *m = QueryAllStoredReviewRequest{} }
func (m *QueryAllStoredReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredReviewRequest) ProtoMessage()    {}
func (*QueryAllStoredReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{16}
}
func (m *QueryAllStoredReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredReviewRequest.Merge(m, src)
}
func (m *QueryAllStoredReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredReviewRequest proto.InternalMessageInfo

func (m *QueryAllStoredReviewRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredReviewResponse struct {
	StoredReview []StoredReview      `protobuf:"bytes,1,rep,name=storedReview,proto3" json:"storedReview"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredReviewResponse) Reset()         { *m = QueryAllStoredReviewResponse{} }
func (m *QueryAllStoredReviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredReviewResponse) ProtoMessage()    {}
func (*QueryAllStoredReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a692c7f6b793183, []int{17}
}
func (m *QueryAllStoredReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredReviewResponse.Merge(m, src)
}
func (m *QueryAllStoredReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredReviewResponse proto.InternalMessageInfo

func (m *QueryAllStoredReviewResponse) GetStoredReview() []StoredReview {
	if m != nil {
		return m.StoredReview
	}
	return nil
}

func (m *QueryAllStoredReviewResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "movie.movie.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "movie.movie.QueryParamsResponse")
	proto.RegisterType((*QueryGetMovieRequest)(nil), "movie.movie.QueryGetMovieRequest")
	proto.RegisterType((*QueryGetMovieResponse)(nil), "movie.movie.QueryGetMovieResponse")
	proto.RegisterType((*QueryAllMovieRequest)(nil), "movie.movie.QueryAllMovieRequest")
	proto.RegisterType((*QueryAllMovieResponse)(nil), "movie.movie.QueryAllMovieResponse")
	proto.RegisterType((*QueryGetReviewRequest)(nil), "movie.movie.QueryGetReviewRequest")
	proto.RegisterType((*QueryGetReviewResponse)(nil), "movie.movie.QueryGetReviewResponse")
	proto.RegisterType((*QueryAllReviewRequest)(nil), "movie.movie.QueryAllReviewRequest")
	proto.RegisterType((*QueryAllReviewResponse)(nil), "movie.movie.QueryAllReviewResponse")
	proto.RegisterType((*QueryGetStoredMovieRequest)(nil), "movie.movie.QueryGetStoredMovieRequest")
	proto.RegisterType((*QueryGetStoredMovieResponse)(nil), "movie.movie.QueryGetStoredMovieResponse")
	proto.RegisterType((*QueryAllStoredMovieRequest)(nil), "movie.movie.QueryAllStoredMovieRequest")
	proto.RegisterType((*QueryAllStoredMovieResponse)(nil), "movie.movie.QueryAllStoredMovieResponse")
	proto.RegisterType((*QueryGetStoredReviewRequest)(nil), "movie.movie.QueryGetStoredReviewRequest")
	proto.RegisterType((*QueryGetStoredReviewResponse)(nil), "movie.movie.QueryGetStoredReviewResponse")
	proto.RegisterType((*QueryAllStoredReviewRequest)(nil), "movie.movie.QueryAllStoredReviewRequest")
	proto.RegisterType((*QueryAllStoredReviewResponse)(nil), "movie.movie.QueryAllStoredReviewResponse")
}

func init() { proto.RegisterFile("movie/movie/query.proto", fileDescriptor_6a692c7f6b793183) }

var fileDescriptor_6a692c7f6b793183 = []byte{
	// 839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xc1, 0x4f, 0x13, 0x4d,
	0x14, 0xef, 0xb6, 0xc0, 0x07, 0x53, 0xc2, 0x97, 0x4c, 0xcb, 0x47, 0x59, 0x48, 0x0b, 0x43, 0x42,
	0xe1, 0x4b, 0xdc, 0x11, 0x4c, 0x3c, 0x0b, 0x26, 0xa2, 0x31, 0x26, 0x50, 0x6f, 0x1e, 0x24, 0x0b,
	0xdd, 0xd4, 0x4d, 0xb6, 0x9d, 0xd2, 0x5d, 0x50, 0xd2, 0xf4, 0xe2, 0xc1, 0x83, 0x5e, 0x48, 0xf4,
	0xe6, 0x3f, 0xe0, 0xc1, 0x3f, 0x84, 0x23, 0x89, 0x17, 0x4f, 0xc6, 0x80, 0xff, 0x85, 0x17, 0xb3,
	0x33, 0x6f, 0xd3, 0x99, 0xdd, 0xd9, 0xb6, 0x24, 0xf5, 0xd2, 0x74, 0x67, 0xde, 0x7b, 0xbf, 0xdf,
	0xef, 0xbd, 0x99, 0xf7, 0x06, 0x2d, 0x34, 0xd9, 0x99, 0xeb, 0x50, 0xf1, 0x7b, 0x72, 0xea, 0x74,
	0xce, 0xad, 0x76, 0x87, 0x05, 0x0c, 0xe7, 0xf9, 0x92, 0xc5, 0x7f, 0xcd, 0x62, 0x83, 0x35, 0x18,
	0x5f, 0xa7, 0xe1, 0x3f, 0x61, 0x62, 0x2e, 0x37, 0x18, 0x6b, 0x78, 0x0e, 0xb5, 0xdb, 0x2e, 0xb5,
	0x5b, 0x2d, 0x16, 0xd8, 0x81, 0xcb, 0x5a, 0x3e, 0xec, 0xfe, 0x7f, 0xcc, 0xfc, 0x26, 0xf3, 0xe9,
	0x91, 0xed, 0x43, 0x64, 0x7a, 0xb6, 0x75, 0xe4, 0x04, 0xf6, 0x16, 0x6d, 0xdb, 0x0d, 0xb7, 0xc5,
	0x8d, 0xc1, 0xb6, 0x24, 0xb3, 0x68, 0xdb, 0x1d, 0xbb, 0x19, 0x45, 0x51, 0xf8, 0x09, 0x4a, 0x1a,
	0x97, 0x8e, 0x73, 0xe6, 0x3a, 0xaf, 0x61, 0xa7, 0x2c, 0xef, 0xf8, 0x01, 0xeb, 0x38, 0xf5, 0x43,
	0xd9, 0xb3, 0xa2, 0xd9, 0x97, 0x03, 0x90, 0x22, 0xc2, 0x07, 0x21, 0xdf, 0x7d, 0x4e, 0xa4, 0xe6,
	0x9c, 0x9c, 0x3a, 0x7e, 0x40, 0x1e, 0xa3, 0x82, 0xb2, 0xea, 0xb7, 0x59, 0xcb, 0x77, 0xf0, 0x16,
	0x9a, 0x12, 0x84, 0x4b, 0xc6, 0x8a, 0xb1, 0x91, 0xdf, 0x2e, 0x58, 0x52, 0xe2, 0x2c, 0x61, 0xbc,
	0x3b, 0x71, 0xf9, 0xa3, 0x92, 0xa9, 0x81, 0x21, 0x59, 0x47, 0x45, 0x1e, 0x69, 0xcf, 0x09, 0x9e,
	0x85, 0x56, 0x80, 0x80, 0xe7, 0x50, 0xd6, 0xad, 0xf3, 0x30, 0x13, 0xb5, 0xac, 0x5b, 0x27, 0x7b,
	0x68, 0x3e, 0x66, 0x07, 0x98, 0x16, 0x9a, 0xe4, 0x0b, 0x00, 0x89, 0x15, 0x48, 0xbe, 0x03, 0x88,
	0xc2, 0x8c, 0xbc, 0x04, 0xc0, 0x1d, 0xcf, 0x53, 0x00, 0x1f, 0x21, 0xd4, 0x2f, 0x05, 0x04, 0x5b,
	0xb7, 0x44, 0xdd, 0xac, 0xb0, 0x6e, 0x96, 0x38, 0x11, 0x50, 0x37, 0x6b, 0xdf, 0x6e, 0x44, 0xbe,
	0x35, 0xc9, 0x93, 0x5c, 0x18, 0xc0, 0xb4, 0x0f, 0x90, 0x64, 0x9a, 0x1b, 0x81, 0x29, 0xde, 0x53,
	0x18, 0x65, 0x39, 0xa3, 0xea, 0x50, 0x46, 0x02, 0x4c, 0xa1, 0x54, 0xed, 0xe7, 0xae, 0xc6, 0x6b,
	0x9b, 0x96, 0xe4, 0xa7, 0xe8, 0xbf, 0xb8, 0x61, 0xbf, 0xb2, 0x62, 0x45, 0x5b, 0x59, 0xb1, 0x15,
	0x55, 0x56, 0x7c, 0x91, 0xc3, 0x7e, 0x1e, 0x54, 0xd4, 0x71, 0x65, 0xfa, 0x93, 0x01, 0x74, 0x25,
	0x04, 0x0d, 0xdd, 0xdc, 0x48, 0x74, 0xc7, 0x97, 0xed, 0x6d, 0x64, 0x46, 0x49, 0x7c, 0xce, 0x2f,
	0x94, 0x72, 0xcc, 0x8a, 0x68, 0x32, 0x70, 0x03, 0x4f, 0x1c, 0xd7, 0x99, 0x9a, 0xf8, 0x20, 0x87,
	0x68, 0x49, 0xeb, 0x03, 0x72, 0x1e, 0xa0, 0xbc, 0xdf, 0x5f, 0x86, 0x94, 0x95, 0x14, 0x4d, 0x92,
	0x1b, 0x08, 0x93, 0x5d, 0x48, 0x1d, 0x48, 0xed, 0x78, 0x9e, 0x86, 0xd4, 0xb8, 0x2a, 0xf2, 0xc5,
	0x00, 0x1d, 0x71, 0x98, 0x34, 0x1d, 0xb9, 0x5b, 0xea, 0x18, 0x5f, 0x95, 0x0e, 0xe2, 0x19, 0x57,
	0xcf, 0x68, 0x09, 0xfd, 0xc3, 0xf9, 0x3c, 0x89, 0xae, 0x47, 0xf4, 0x19, 0xee, 0x1c, 0x77, 0x1c,
	0x3b, 0x60, 0x1d, 0x0e, 0x3f, 0x53, 0x8b, 0x3e, 0xc9, 0x31, 0x5a, 0xd6, 0x87, 0x04, 0xf5, 0x0f,
	0xd1, 0xac, 0x2f, 0xad, 0x43, 0x9e, 0x17, 0x35, 0xf2, 0x95, 0x03, 0xaa, 0x38, 0x11, 0x27, 0x9e,
	0xe1, 0xbf, 0x73, 0xb7, 0xbe, 0x1a, 0x20, 0x26, 0x81, 0x93, 0x2a, 0x26, 0x77, 0x6b, 0x31, 0x63,
	0xab, 0xe6, 0xf6, 0xef, 0x69, 0x34, 0xc9, 0xe9, 0xe2, 0x57, 0x68, 0x4a, 0xcc, 0x19, 0x5c, 0x51,
	0xb8, 0x24, 0x87, 0x98, 0xb9, 0x92, 0x6e, 0x20, 0x20, 0xc8, 0xd2, 0xdb, 0x6f, 0xbf, 0x3e, 0x66,
	0xe7, 0x71, 0x81, 0x26, 0x67, 0x32, 0x66, 0xd0, 0xce, 0xf1, 0x6a, 0x32, 0x4e, 0x6c, 0x9a, 0x99,
	0x64, 0x90, 0x09, 0x80, 0x55, 0x38, 0xd8, 0x22, 0x5e, 0xa0, 0x89, 0x31, 0x4f, 0xbb, 0x6e, 0xbd,
	0x87, 0x9b, 0x68, 0x9a, 0x7b, 0xec, 0x78, 0x9e, 0x0e, 0x33, 0x36, 0xd0, 0x74, 0x98, 0xf1, 0x91,
	0x44, 0x4c, 0x8e, 0x59, 0xc4, 0x38, 0x89, 0x89, 0xfd, 0xa8, 0x87, 0x62, 0x3d, 0x7b, 0xe5, 0xe0,
	0x99, 0x6b, 0x03, 0x6d, 0x00, 0x6e, 0x85, 0xc3, 0x99, 0xb8, 0x44, 0x93, 0x0f, 0x16, 0xa1, 0xf1,
	0x04, 0xcd, 0x08, 0x9f, 0x50, 0xa4, 0x5e, 0xc1, 0x50, 0xdc, 0xc4, 0x38, 0x48, 0xa9, 0xa3, 0xc0,
	0xc5, 0x1f, 0x0c, 0x94, 0x97, 0xba, 0x0e, 0xae, 0x6a, 0x95, 0x24, 0xbb, 0xa6, 0xb9, 0x31, 0xdc,
	0x10, 0xf0, 0x37, 0x39, 0xfe, 0x1a, 0x5e, 0xa5, 0x69, 0xcf, 0x31, 0xda, 0xe5, 0x83, 0xa0, 0x87,
	0xdf, 0x19, 0x68, 0x4e, 0x0a, 0x11, 0xa6, 0xa1, 0xaa, 0x95, 0x38, 0x1a, 0x21, 0x7d, 0x23, 0x26,
	0xab, 0x9c, 0xd0, 0x12, 0x5e, 0x4c, 0x25, 0x84, 0x3f, 0x1b, 0x68, 0x56, 0xbe, 0xc0, 0x78, 0x90,
	0x5c, 0xb5, 0x26, 0x9b, 0x23, 0x58, 0x02, 0x91, 0xfb, 0x9c, 0xc8, 0x5d, 0x6c, 0xd1, 0xd4, 0x87,
	0x28, 0xed, 0x42, 0xeb, 0xed, 0xd1, 0x2e, 0xb4, 0xda, 0x1e, 0x7e, 0x6f, 0xa0, 0x7f, 0xe5, 0x80,
	0x61, 0x9e, 0x06, 0xc9, 0x1f, 0x4a, 0x30, 0xa5, 0xcf, 0x11, 0xc2, 0x09, 0x2e, 0x63, 0x33, 0x9d,
	0xe0, 0xee, 0x9d, 0xcb, 0xeb, 0xb2, 0x71, 0x75, 0x5d, 0x36, 0x7e, 0x5e, 0x97, 0x8d, 0x8b, 0x9b,
	0x72, 0xe6, 0xea, 0xa6, 0x9c, 0xf9, 0x7e, 0x53, 0xce, 0xbc, 0x28, 0x08, 0xf3, 0x37, 0xe0, 0x16,
	0x9c, 0xb7, 0x1d, 0xff, 0x68, 0x8a, 0xbf, 0xac, 0xef, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x01,
	0x7e, 0x7c, 0xf9, 0x6f, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Movie by id.
	Movie(ctx context.Context, in *QueryGetMovieRequest, opts ...grpc.CallOption) (*QueryGetMovieResponse, error)
	// Queries a list of Movie items.
	MovieAll(ctx context.Context, in *QueryAllMovieRequest, opts ...grpc.CallOption) (*QueryAllMovieResponse, error)
	// Queries a Review by id.
	Review(ctx context.Context, in *QueryGetReviewRequest, opts ...grpc.CallOption) (*QueryGetReviewResponse, error)
	// Queries a list of Review items.
	ReviewAll(ctx context.Context, in *QueryAllReviewRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error)
	// Queries a StoredMovie by index.
	StoredMovie(ctx context.Context, in *QueryGetStoredMovieRequest, opts ...grpc.CallOption) (*QueryGetStoredMovieResponse, error)
	// Queries a list of StoredMovie items.
	StoredMovieAll(ctx context.Context, in *QueryAllStoredMovieRequest, opts ...grpc.CallOption) (*QueryAllStoredMovieResponse, error)
	// Queries a StoredReview by index.
	StoredReview(ctx context.Context, in *QueryGetStoredReviewRequest, opts ...grpc.CallOption) (*QueryGetStoredReviewResponse, error)
	// Queries a list of StoredReview items.
	StoredReviewAll(ctx context.Context, in *QueryAllStoredReviewRequest, opts ...grpc.CallOption) (*QueryAllStoredReviewResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Movie(ctx context.Context, in *QueryGetMovieRequest, opts ...grpc.CallOption) (*QueryGetMovieResponse, error) {
	out := new(QueryGetMovieResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/Movie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MovieAll(ctx context.Context, in *QueryAllMovieRequest, opts ...grpc.CallOption) (*QueryAllMovieResponse, error) {
	out := new(QueryAllMovieResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/MovieAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Review(ctx context.Context, in *QueryGetReviewRequest, opts ...grpc.CallOption) (*QueryGetReviewResponse, error) {
	out := new(QueryGetReviewResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/Review", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReviewAll(ctx context.Context, in *QueryAllReviewRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error) {
	out := new(QueryAllReviewResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/ReviewAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredMovie(ctx context.Context, in *QueryGetStoredMovieRequest, opts ...grpc.CallOption) (*QueryGetStoredMovieResponse, error) {
	out := new(QueryGetStoredMovieResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/StoredMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredMovieAll(ctx context.Context, in *QueryAllStoredMovieRequest, opts ...grpc.CallOption) (*QueryAllStoredMovieResponse, error) {
	out := new(QueryAllStoredMovieResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/StoredMovieAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredReview(ctx context.Context, in *QueryGetStoredReviewRequest, opts ...grpc.CallOption) (*QueryGetStoredReviewResponse, error) {
	out := new(QueryGetStoredReviewResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/StoredReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredReviewAll(ctx context.Context, in *QueryAllStoredReviewRequest, opts ...grpc.CallOption) (*QueryAllStoredReviewResponse, error) {
	out := new(QueryAllStoredReviewResponse)
	err := c.cc.Invoke(ctx, "/movie.movie.Query/StoredReviewAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Movie by id.
	Movie(context.Context, *QueryGetMovieRequest) (*QueryGetMovieResponse, error)
	// Queries a list of Movie items.
	MovieAll(context.Context, *QueryAllMovieRequest) (*QueryAllMovieResponse, error)
	// Queries a Review by id.
	Review(context.Context, *QueryGetReviewRequest) (*QueryGetReviewResponse, error)
	// Queries a list of Review items.
	ReviewAll(context.Context, *QueryAllReviewRequest) (*QueryAllReviewResponse, error)
	// Queries a StoredMovie by index.
	StoredMovie(context.Context, *QueryGetStoredMovieRequest) (*QueryGetStoredMovieResponse, error)
	// Queries a list of StoredMovie items.
	StoredMovieAll(context.Context, *QueryAllStoredMovieRequest) (*QueryAllStoredMovieResponse, error)
	// Queries a StoredReview by index.
	StoredReview(context.Context, *QueryGetStoredReviewRequest) (*QueryGetStoredReviewResponse, error)
	// Queries a list of StoredReview items.
	StoredReviewAll(context.Context, *QueryAllStoredReviewRequest) (*QueryAllStoredReviewResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Movie(ctx context.Context, req *QueryGetMovieRequest) (*QueryGetMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Movie not implemented")
}
func (*UnimplementedQueryServer) MovieAll(ctx context.Context, req *QueryAllMovieRequest) (*QueryAllMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieAll not implemented")
}
func (*UnimplementedQueryServer) Review(ctx context.Context, req *QueryGetReviewRequest) (*QueryGetReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Review not implemented")
}
func (*UnimplementedQueryServer) ReviewAll(ctx context.Context, req *QueryAllReviewRequest) (*QueryAllReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewAll not implemented")
}
func (*UnimplementedQueryServer) StoredMovie(ctx context.Context, req *QueryGetStoredMovieRequest) (*QueryGetStoredMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMovie not implemented")
}
func (*UnimplementedQueryServer) StoredMovieAll(ctx context.Context, req *QueryAllStoredMovieRequest) (*QueryAllStoredMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMovieAll not implemented")
}
func (*UnimplementedQueryServer) StoredReview(ctx context.Context, req *QueryGetStoredReviewRequest) (*QueryGetStoredReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredReview not implemented")
}
func (*UnimplementedQueryServer) StoredReviewAll(ctx context.Context, req *QueryAllStoredReviewRequest) (*QueryAllStoredReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredReviewAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Movie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Movie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/Movie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Movie(ctx, req.(*QueryGetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MovieAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MovieAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/MovieAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MovieAll(ctx, req.(*QueryAllMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Review_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Review(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/Review",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Review(ctx, req.(*QueryGetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReviewAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReviewAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/ReviewAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReviewAll(ctx, req.(*QueryAllReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/StoredMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredMovie(ctx, req.(*QueryGetStoredMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredMovieAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredMovieAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/StoredMovieAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredMovieAll(ctx, req.(*QueryAllStoredMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/StoredReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredReview(ctx, req.(*QueryGetStoredReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredReviewAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredReviewAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.movie.Query/StoredReviewAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredReviewAll(ctx, req.(*QueryAllStoredReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "movie.movie.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Movie",
			Handler:    _Query_Movie_Handler,
		},
		{
			MethodName: "MovieAll",
			Handler:    _Query_MovieAll_Handler,
		},
		{
			MethodName: "Review",
			Handler:    _Query_Review_Handler,
		},
		{
			MethodName: "ReviewAll",
			Handler:    _Query_ReviewAll_Handler,
		},
		{
			MethodName: "StoredMovie",
			Handler:    _Query_StoredMovie_Handler,
		},
		{
			MethodName: "StoredMovieAll",
			Handler:    _Query_StoredMovieAll_Handler,
		},
		{
			MethodName: "StoredReview",
			Handler:    _Query_StoredReview_Handler,
		},
		{
			MethodName: "StoredReviewAll",
			Handler:    _Query_StoredReviewAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie/movie/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMovieRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMovieResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Movie.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMovieRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMovieResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Movie) > 0 {
		for iNdEx := len(m.Movie) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Movie[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Review.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Review) > 0 {
		for iNdEx := len(m.Review) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Review[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredMovieRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredMovieResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredMovie.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredMovieRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredMovieResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredMovie) > 0 {
		for iNdEx := len(m.StoredMovie) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredMovie[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.MovieId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MovieId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredReview.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredReview) > 0 {
		for iNdEx := len(m.StoredReview) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredReview[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Movie.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Movie) > 0 {
		for _, e := range m.Movie {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Review.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Review) > 0 {
		for _, e := range m.Review {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredMovie.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredMovie) > 0 {
		for _, e := range m.StoredMovie {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MovieId != 0 {
		n += 1 + sovQuery(uint64(m.MovieId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredReview.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredReview) > 0 {
		for _, e := range m.StoredReview {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Movie.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Movie = append(m.Movie, Movie{})
			if err := m.Movie[len(m.Movie)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Review.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Review = append(m.Review, Review{})
			if err := m.Review[len(m.Review)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredMovie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredMovie.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredMovie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredMovie = append(m.StoredMovie, StoredMovie{})
			if err := m.StoredMovie[len(m.StoredMovie)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieId", wireType)
			}
			m.MovieId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredReview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredReview.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredReview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredReview = append(m.StoredReview, StoredReview{})
			if err := m.StoredReview[len(m.StoredReview)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
